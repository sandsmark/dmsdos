DMSDOS + CVF-FAT installation

0. Preparing installation
-------------------------

Upgrade from dmsdosfs 0.8.x(.y) or earlier: *** WARNING ***
  If you have an earlier version of the dmsdos filesystem installed (i.e. 
  dmsdos 0.8.x), you'd better throw away your kernel sources and get fresh 
  ones. You must remove all old dmsdos sources, especially header files, and 
  executables or modules. The new code doesn't install the dmsdos module in 
  the kernel source tree, so this is very important. To be sure, do a 
  'find / -name "*dmsdos*" -print', or check your path for old executables 
  and your /lib/modules/* directories for old modules. Okay, I promise that 
  this kind of cleanup will no longer be necessary for further upgrades :)

Upgrade from 0.9.0(.x) or higher:
  You don't need to reconfigure or recompile your kernel. You don't
  need to patch the kernel again. Just compile the new dmsdos module 
  and the updated dmsdos utilities.

Fresh installation:
  If you have never used an older version of dmsdos before, you don't
  have to remove anything :) But, depending on your kernel version, you
  may have to patch your kernel sources. You may also have to reconfigure
  and recompile your kernel even if there's no patch needed.

For brave people only:
  Though this is still experimental, dmsdos can perform most parts of
  the installation automatically. (This was already a hidden feature in
  previous versions.) If you just type 'make', it performs steps 1, 2, 3,
  and optionally 8 (it will ask you) below. This is for people with a
  standard kernel who do not want to care about all the details. If
  your kernel has to be recompiled the procedure stops just after
  recompiling your kernel and your modules. A text appears asking you
  to install the new kernel and the new modules by hand and reboot with 
  the new kernel. You can do that now, but you can also do it later.
  Then enter a 'make' again, and it should continue with the rest.
  You can still run the second 'make' without installing the new kernel
  and modules and without rebooting; dmsdos will compile in spite of that.
  But dmsdos will not run correctly or not run at all unless you have 
  rebooted with the new kernel and the new modules.

-------------------------------------------------------------------------

1. Check kernel for CVF-FAT and install it if it is missing
-----------------------------------------------------------

  Make sure you have a kernel version 2.0.29 or newer from the 2.0 series
  or a kernel version 2.1.94 or newer from the 2.1 development series.
  Older kernels may work too, but this has never been tested. If you are
  using older kernels and run into problems please don't expect me to fix
  them - it's too much work to keep a multi-kernel dmsdos package work with
  all old and new kernels :)

  Dmsdos version 0.9.0 and higher depend on the CVF-FAT interface in the
  kernel. This interface is already present in kernels 2.1.80 and newer,
  and it is also compatible with UMSDOS in 2.1.xx since 2.1.94.
  So if you have 2.1.80 or newer you can skip the rest of this section.

  For 2.0.xx kernels you need to apply a patch. Dmsdos comes with a
  collection of patches for different setups. If you are brave you can
  enter a 'make patch'. This starts a script that tries to find out
  automatically whether you need a patch and which one, and it installs
  the patches it thinks you need. Be warned, the script is not perfect. 
  It is known to work if you do not have an unusual setup (well, it works 
  for a plain 2.0.33 kernel, also with a fat32 patched 2.0.33 kernel and 
  with the new 2.0.34 and 2.0.35).

  If automatic patching fails or if your setup is a highly patched or hacked 
  kernel you might want to take a look at further instructions. Please read 
  the file DIFFS.TXT to find out which patch you need and how to install it. 

----------------------------------------------------------------------------

2. Check kernel configuration
-----------------------------

  For dmsdos you need:

      - Module support
      - Loopback block device (may be compiled as module)
        *** NOTE: This one can be found under 'Additional block devices'.
            It has nothing in common with the network loopback interface
            so please don't mix them up :)
      - FAT filesystem (may be compiled as module)
      - MSDOS or VFAT filesystem (may be compiled as module)
      - since 2.0.34 also NLS support (but this is already required by FAT)

  If you don't know whether all of them are present you can enter a
  'make kernelconf'. This calls a script that checks your kernel
  configuration and calls the interactive kernel 'Configure' script if
  something is missing. In that case, just go through the questions,
  mostly accepting the defaults, but be sure to say Y for module support,
  Y or M for loopback block device, Y or M for FAT filesystem support, 
  and Y or M for the MSDOS or VFAT filesystem. Then the script tries to
  compile your kernel. In some cases the script tends to recompile your
  kernel though it isn't really necessary. So don't be surprised - it's 
  a dumb script. :) Note that the script does not *install* the new kernel 
  and the new modules.

  Refer to the kernel documentation for details about kernel configuration.

  If you do not want to let the dmsdos Makefile call the script but you 
  want to do it 'by hand' you can do this:

      cd /usr/src/linux
      make config (or 'make menuconfig' if you prefer)
      make dep
      make clean
      make zImage (or 'make bzImage' if you need it)
      make modules

  When the kernel and the modules have been compiled, they must be
  installed. This is usually done with these commands:

      cd /usr/src/linux
      make zlilo
      make modules_install
      reboot

---------------------------------------------------------------------------

3. Compile the dmsdos sources
-----------------------------

  Go into the directory where the dmsdos package untarred and do

      cd src
      make config (or 'make menuconfig' if you prefer)

  Yes, there's a configuration script that asks some questions now.
  You very likely know this procedure from the Linux kernel. In fact,
  the scripts have been copied from the kernel and a bit hacked :-)
  Well, there's no xconfig (I think this is overkill).

  If you have no clue what to answer to the questions, consult the online
  help or accept the defaults (which should be safe and work for all
  systems).

  For convenience, there are some pre-configured files which can be loaded 
  with the 'Load an Alternate Configuration File' menu item during
  'make menuconfig'. Currently, these files are available:

    config.small-module       - for a small dmsdos module (e.g. for bootdisk)
    config.low-traffic-write  - for low-traffic write access to a CVF
    config.high-traffic-write - for high-traffic write access to a CVF
    config.debug              - for safe low-level dmsdos debugging

  After loading the alternate config file you'd better check the settings
  (just walk through all the menus). Especially if you want a small module 
  exclude the CVF format drivers you don't need.

  The text-based 'make config' can also use a pre-configured file. Just copy
  the config.what-you-like to .config and run 'make config'.

  Then continue with these steps:

      make dep
      make clean
      make

  The last line starts compiling the sources. You may see some warnings
  about 'unused variables' which can be ignored.

  There have been compile-time problems under certain gcc or libc systems
  (notably glibc2/libc6). dmsdos should now fully compile under libc6, but 
  this is not thoroughly tested. There were also problems with some old
  versions of binutils reported. Have a look at the Makefile for some hacks.

  If compiling the whole dmsdos package fails, you can try a 'make min'
  which compiles a minimal dmsdos subsystem. Please note that glibc2/libc6
  causes *no* run-time problems (well, dmsdos is a kernel module and doesn't 
  use any system libraries).

  If you run into strange problems, you can try to compile each part of
  dmsdos separately:

      make dmsdos.o       - compiles the dmsdos module dmsdos.o (required)
      make dutil          - compiles the dmsdos utility dutil (useful)
      make dmsdosd        - compiles the external dmsdos daemon (nice)
      make libdmsdos.a    - compiles the dmsdos library (experimental)
      make dcread         - compiles a sample program using libdmsdos (toy)
      make dmsdosfsck     - Ahh... it's there :) 

  If you can't get the external daemon compiled try the internal daemon
  (though most people never need the daemon). It can be enabled during 
  configuration ('make config').

  If you can't get it compiled at all, have a look at the Makefile in the
  src directory. It has some switches to work around some problems (gas
  bugs, unusual systems, switch off cpu specific optimization, switch off
  inline assembler statements, etc). This should not be necessary, but some
  systems might need it.

  If you still can't get it compiled, please send a bug report including a
  detailed description of your system (version of kernel, gcc, binutils etc)
  and what error messages are shown. If you know how to fix the problem
  please also let me know :) A checklist about the details I usually need
  for tracing down a problem can be found in doc/dmsdos.doc.

---------------------------------------------------------------------------

4. Check whether the module loads correctly:

      insmod -m dmsdos > /tmp/dmsdos.map

  Check the file /tmp/dmsdos.map for error messages.

  If the module fails to load, make sure you are using the right insmod
  version (there are lots of modutils versions for 2.1.xx - most don't
  work correctly under all kernel versions; some are even said not to work 
  at all). If it still fails, try to load the fat module (and since kernel 
  2.0.34 also the nls module) before. If it complains about a missing symbol,
  try to find out which part of the kernel the symbol belongs to, and load
  the appropriate module before or compile that part into your kernel.
  If it continues to fail this is a bug.

  Please always load the module with the -m flag and redirect the
  output, which contains a symbol table, to a file. This file is needed
  in case there is a crash with a register dump. Please use this symbol 
  table to find the function where the problem occured. (Unfortunately, 
  this table usually differs from one insmod time to another depending on 
  actually free memory pages, so you can't just create the table once and 
  then use it for all dumps later.) If you don't know how to interpret a
  register dump, please have a look at Linus' excellent instructions for 
  that in the file README in /usr/src/linux. It is really important that 
  *you* try to interpret the register dump since it is absolutely system 
  dependent. THIS IS NOT DIFFICULT. YOU DO NOT HAVE TO KNOW C PROGRAMMING 
  FOR THAT.

  Let me repeat this. I just cannot track down register dumps since they
  are just some numbers, even to me :) Those numbers only make sense in 
  conjunction with the symbol table that was printed by insmod when the 
  module was loaded the last time before the crash. Thus, bug reports 
  without your interpretation by means of the symbol table are Really 
  Worthless and will be ignored.

----------------------------------------------------------------------------

5. The first test
-----------------

  For the first test be sure to have the loop module, the fat module,
  the dmsdos module and the msdos or vfat module loaded. If you are using
  kerneld you might not have to care about most of them. Just the fat
  module may have to be loaded manually in that case in order to load
  the dmsdos module.
  
  Mount your Dos/Win95 partition that is the host for a compressed drive
  as usual (if you haven't done this already).

  Assuming the large Compressed Volume File (CVF) is /DOS/dblspace.001 and
  you want to mount it under /mnt, try this (it mounts READ-ONLY):

     mount -t msdos -o ro,loop /DOS/dblspace.001 /mnt

  If the filesystem contains long filenames, you may want to use the VFAT
  filesystem instead of the plain MSDOS driver:

     mount -t vfat -o ro,loop /DOS/dblspace.001 /mnt

  Now you can go into the /mnt directory and do some read access tests.
  If there are some problems, the dmsdos driver becomes very noisy and logs
  a lot of messages in the syslog. Not all of them are real errors, though.
  Some are just information about the kind of CVF detected and the results
  of some probing functions. Yes, there are different kinds of CVF formats
  throughout the Dos/Win95 versions :)

-----------------------------------------------------------------------------

6. Permanent installation
-------------------------

  *** WARNING ***
  If you are upgrading from a dmsdos release in the range 0.9.0 to 0.9.1.1, 
  be sure to remove the old dmsdos module from the module path. The default
  location has changed from /lib/modules/misc/ to /lib/modules/`uname -r`/fs/.
  So the old module will not be overwritten and insmod may load the wrong 
  module if there are more than one dmsdos module lying around :)
  Note that the default location where the module is installed may be a bad
  choice if you switch kernel versions often. You may have to compile a
  seperate module for each kernel version. If you prefer the module to be
  installed at a different location feel free to edit the Makefile :)

  If you are sure it works, you can install it permanently on your system
  by doing

      make install

  This copies the module, binaries and manpages to standard system
  directories (usually under /lib/modules and /usr/local/[bin|man] - check 
  the Makefile for the locations). All the files that are copied by 
  'make install' are removed by 'make uninstall'.

  If 'make install' fails because the code cannot be compiled completely,
  try a 'make install-min' instead to install a minimal but functional 
  dmsdos subsystem (which has been compiled by 'make min').

-----------------------------------------------------------------------------

7. Some BUG WARNINGS important to know for installation
-------------------------------------------------------

  - UMSDOS related bugs:

   *** IN SOME 2.1.XX KERNELS UMSDOS SUPPORT IS COMPLETELY BROKEN ***
   For some kernels, UMSDOS doesn't compile at all, for others it is
   incompatible with dmsdos. Please do not use UMSDOS and dmsdos at the 
   same time under kernels 2.1.80 up to 2.1.93 (it cannot work). Use a 
   kernel from the 2.0.xx series or get at least 2.1.94.

   If the UMSDOS module fails to load and complains about two
   missing symbols 'fat_readpage' and 'fat_dir_ioctl':
   I forgot to add some symbols to the export list in older cvf.diffs for 
   kernel 2.0.33. This bug also went in 2.1.80 when CVF-FAT was included. 
   In order to fix the problem, edit file linux/fs/fat/fatfs_syms.c and 
   append the missing symbols 'fat_readpage' and 'fat_dir_ioctl' to the 
   export list. Look how the other symbols are listed there and put in the 
   missing ones in the same way. (You don't need to know C programming for 
   that. Just use your common sense. You'll know what to do when you see 
   what's in that the file.) Then recompile the fat module (or the kernel 
   if your fat support isn't modular).

-----------------------------------------------------------------------------

8. Using kerneld to load dmsdos
-------------------------------

  I've received lots of mails about this. It seems still not working on
  all systems. 

  This is an installation tip for the convenient system hacker. It is
  not the default installation, and it is only recommended for dmsdos
  versions that are known to be stable. The reason is: this way does not
  produce a symbol map for debugging :)

  If you do not know what kerneld is and what it does, please skip this
  section (or read the KERNELD-MINI-HOWTO, for example).

  Apply the diff 'kerneld-autoload.diff' to your kernel sources and
  recompile and reinstall your modules. If your FAT support is not modular
  but a fix part of the kernel, you must recompile and reinstall your 
  kernel instead (and reboot).

  These changes just trigger kerneld to load dmsdos each time a fat based
  filesystem is mounted. This ensures the detect_cvf routines are present
  when they are needed to determine whether the filesystem is a CVF. If 
  it's not a CVF the dmsdos module will unload again after some time. 

  Please do *not* add a line like 'post-install fat insmod -k dmsdos' or 
  'alias fat dmsdos' to /etc/modules.conf (or /etc/conf.modules) any longer.
  (Though some dmsdos users reported that it works for them.) I must warn,
  it just causes headache. The problem is, if only fat gets used, dmsdos is
  unloaded after 1 minute by kerneld. If you mount a CVF after that, dmsdos
  will not be reloaded because fat gets not reloaded (well fat is present).
  So the fat driver tries to handle a CVF by itself (and horribly fails and
  starts printing possibly tons of errors to syslog). Argh. On the other
  hand, if you leave out the -k flag from the insmod statement above,
  dmsdos will never be unloaded and fat can never be unloaded because dmsdos
  is using it.

  The autoload feature can be temporarily switched off by placing
  'alias dmsdos off' in /etc/modules.conf (or /etc/conf.modules) and
  sending a SIGHUP to kerneld.

  The autoload patch enables a second feature: If a CVF is mounted with the
  cvf_format=xxx mount option, a module xxx is requested before. So it just
  can load other CVF modules too. (Do they exist? Just let me know.)
  If you want to add support for loading other CVF modules without having
  to specify the format, add 'request_module("name_of_module");' statements
  to linux/fs/fat/cvf.c near the 'request_module("dmsdos");' statement.

---------------------------------------------------------------------------

9. Mounting CVFs from /etc/fstab at boot time
---------------------------------------------

  It may be a bit tricky to get CVFs mounted at boot time. An /etc/fstab
  entry for a CVF usually looks like this:

       /DOS/drvspace.001  /DOSF   msdos     loop   1   0

  It is really important that the sixth field (the 'pass number') is zero
  in order to prevent the filesystem from being checked at boot time.
  (If you really want to check dos partitions *and* CVFs at boot time you
  very likely must hack your bootup scripts. This is not recommended,
  however, unless you are an experienced system administrator and know in
  detail how your bootup scripts work. This is not explained in the dmsdos
  documentation.)

  In the usual one-pass 'mount -a' procedure, I noticed a strangeness
  regarding the order in /etc/fstab: The filesystems seem to be
  mounted in reverse order. Thus

       /DOS/drvspace.001 /DOSF msdos     loop  1  0
       /dev/hda1       /DOS    msdos     defaults   1  0

  works on my system while

       /dev/hda1       /DOS    msdos     defaults   1  0
       /DOS/drvspace.001 /DOSF msdos     loop  1  0

  doesn't. So just be prepared to play around a bit with the fstab.

----------------------------------------------------------------------------

10. Further information
-----------------------

  The main dmsdos documentation is in doc/dmsdos.doc. Some other files in
  the doc directory may be useful, too. Take a look at them if you want to 
  know more details or technical information on how dmsdos works. Please 
  also take a look at the documentation if you run into problems before 
  sending a bug report. Yes, there is a list with common problems and their 
  solutions :)
